% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/terms-TermList.R
\name{TermList}
\alias{TermList}
\title{Additive terms (R6 class)}
\description{
A semi-parametric additive model (R6 class).
}
\section{Super class}{
\code{\link[lgpr2:StanCodeCreator]{lgpr2::StanCodeCreator}} -> \code{TermList}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{terms}}{A list of \code{FormulaTerm} objects, defining the
function components.}

\item{\code{fsum_name}}{Base name of the sum of the terms variable in 'Stan' code.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TermList-new}{\code{TermList$new()}}
\item \href{#method-TermList-string}{\code{TermList$string()}}
\item \href{#method-TermList-input_vars}{\code{TermList$input_vars()}}
\item \href{#method-TermList-stan_names}{\code{TermList$stan_names()}}
\item \href{#method-TermList-get_term}{\code{TermList$get_term()}}
\item \href{#method-TermList-latex}{\code{TermList$latex()}}
\item \href{#method-TermList-length}{\code{TermList$length()}}
\item \href{#method-TermList-create_standata}{\code{TermList$create_standata()}}
\item \href{#method-TermList-fill_term_confs}{\code{TermList$fill_term_confs()}}
\item \href{#method-TermList-set_transforms}{\code{TermList$set_transforms()}}
\item \href{#method-TermList-check_transforms}{\code{TermList$check_transforms()}}
\item \href{#method-TermList-clone}{\code{TermList$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="print"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-print'><code>lgpr2::StanCodeCreator$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stancode_data"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stancode_data'><code>lgpr2::StanCodeCreator$stancode_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stancode_functions"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stancode_functions'><code>lgpr2::StanCodeCreator$stancode_functions()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stancode_gq"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stancode_gq'><code>lgpr2::StanCodeCreator$stancode_gq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stancode_model"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stancode_model'><code>lgpr2::StanCodeCreator$stancode_model()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stancode_pars"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stancode_pars'><code>lgpr2::StanCodeCreator$stancode_pars()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stancode_tdata"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stancode_tdata'><code>lgpr2::StanCodeCreator$stancode_tdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stancode_tpars"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stancode_tpars'><code>lgpr2::StanCodeCreator$stancode_tpars()</code></a></span></li>
<li><span class="pkg-link" data-pkg="lgpr2" data-topic="StanCodeCreator" data-id="stanfiles_functions"><a href='../../lgpr2/html/StanCodeCreator.html#method-StanCodeCreator-stanfiles_functions'><code>lgpr2::StanCodeCreator$stanfiles_functions()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-new"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-new}{}}}
\subsection{Method \code{new()}}{
Create term list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$new(terms)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{terms}}{The list of model terms.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-string"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-string}{}}}
\subsection{Method \code{string()}}{
The term list as a string
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$string()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-input_vars"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-input_vars}{}}}
\subsection{Method \code{input_vars()}}{
Get names of all input variables
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$input_vars()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-stan_names"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-stan_names}{}}}
\subsection{Method \code{stan_names()}}{
List names of all terms in Stan code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$stan_names()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-get_term"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-get_term}{}}}
\subsection{Method \code{get_term()}}{
Get term object based on term name in Stan'
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$get_term(f_name_stan)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{f_name_stan}}{Name of term in 'Stan'. Valid names
can be checked using the `$stan_names()` method.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-latex"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-latex}{}}}
\subsection{Method \code{latex()}}{
Latex code, mathematical notation for the terms
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$latex()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-length"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-length}{}}}
\subsection{Method \code{length()}}{
List length
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$length()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-create_standata"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-create_standata}{}}}
\subsection{Method \code{create_standata()}}{
Create the 'Stan' data list from a data frame. Performs transforms
on continuous variables that are input to GP terms.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$create_standata(data, dataname, term_confs = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.}

\item{\code{dataname}}{Name of data set.}

\item{\code{term_confs}}{A list that specifies configuration of model terms.
If name of any term is not found from the list, \code{$default_conf()}
of that \code{FormulaTerm} is used.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-fill_term_confs"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-fill_term_confs}{}}}
\subsection{Method \code{fill_term_confs()}}{
Get term configuration of all terms, some of which can be given by user.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$fill_term_confs(term_confs = NULL, num_bf = NULL, scale_bf = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{term_confs}}{A list that specifies configuration of model terms.
If name of any term is not found from the list, \code{$default_conf()}
of that \code{FormulaTerm} is used.}

\item{\code{num_bf}}{If not \code{NULL}, configurations of all
\code{GPTerm}s are updated with this value.}

\item{\code{scale_bf}}{If not \code{NULL}, configurations of all
\code{GPTerm}s are updated with this value.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated model object (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-set_transforms"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-set_transforms}{}}}
\subsection{Method \code{set_transforms()}}{
Set variable transforms using data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$set_transforms(data, names_skip = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.}

\item{\code{names_skip}}{Names of terms whose input transform should be
skipped.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-check_transforms"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-check_transforms}{}}}
\subsection{Method \code{check_transforms()}}{
Check how data transforms using the current model transforms.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$check_transforms(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TermList-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TermList-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TermList$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
